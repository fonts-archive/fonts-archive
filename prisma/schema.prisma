generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model fonts {
  code            Int            @id @default(autoincrement())
  name            String
  lang            String
  date            String
  view            Int            @default(0)
  like            Int            @default(0)
  font_family     String
  font_type       String
  font_weight     String
  source          String
  source_link     String
  github_link     String
  cdn_css         String
  cdn_link        String
  cdn_import      String
  cdn_font_face   String         @db.Text
  cdn_url         String
  license_print   String
  license_web     String
  license_video   String
  license_package String
  license_embed   String
  license_bici    String
  license_ofl     String
  license_purpose String
  license_source  String
  license         String         @db.Text
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now()) @updatedAt
  liked_user      fontsLiked[]
  comments        fontsComment[]

  @@index([code])
}

model fontsUser {
  user_no            Int            @id @default(autoincrement())
  user_name          String
  user_id            String         @unique
  user_pw            String
  user_session_id    String
  user_email_token   String
  user_email_confirm Boolean
  profile_img        String         @db.Text
  nickname_reported  Int            @default(0)
  created_at         DateTime       @default(now())
  updated_at         DateTime       @default(now()) @updatedAt
  liked_fonts        fontsLiked[]
  comments           fontsComment[]
  reports            fontsUserReport[]

  @@index([user_no])
  @@index([user_id])
}

model fontsLiked {
  font_id Int
  user_id Int
  font    fonts     @relation(fields: [font_id], references: [code])
  user    fontsUser @relation(fields: [user_id], references: [user_no])

  @@id([font_id, user_id])
  @@index([font_id])
  @@index([user_id])
}

model fontsComment {
  font_id               Int
  user_id               Int
  comment               String    @db.Text
  depth                 Int
  bundle_id             Int
  bundle_order          Int
  reported_politics     Int       @default(0)
  reported_swearing     Int       @default(0)
  reported_etc          Int       @default(0)
  is_deleted            Boolean   @default(false)
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  comment_id            Int       @id @default(autoincrement())
  deleted_at            DateTime  @default(now())
  is_deleted_with_reply Boolean   @default(false)
  is_deleted_by_reports Boolean   @default(false)
  font                  fonts     @relation(fields: [font_id], references: [code])
  user                  fontsUser @relation(fields: [user_id], references: [user_no])
  reports               fontsUserReport[]

  @@index([font_id])
  @@index([user_id])
  @@index([comment_id])
}

model fontsUserReport {
  report_id       Int          @id @default(autoincrement())
  report_user_id  Int
  comment_id      Int
  report_nickname Boolean      @default(false)
  report_politics Boolean      @default(false)
  report_swearing Boolean      @default(false)
  report_etc      Boolean      @default(false)
  report_text     String       @db.Text
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now()) @updatedAt
  user            fontsUser    @relation(fields: [report_user_id], references: [user_no])
  comment         fontsComment @relation(fields: [comment_id], references: [comment_id])

  @@index([report_id])
  @@index([report_user_id])
  @@index([comment_id])
}

model fontsIssue {
  issue_id          Int      @id @default(autoincrement())
  issue_title       String
  issue_email       String
  issue_content     String   @db.Text
  issue_img_length  Int      @default(0)
  issue_img_1       String
  issue_img_2       String
  issue_img_3       String
  issue_img_4       String
  issue_img_5       String
  issue_closed      Boolean  @default(false)
  issue_closed_type String
  issue_closed_at   DateTime @default(now())
  issue_created_at  DateTime @default(now())

  @@index([issue_id])
}

model fontsBugReport {
  issue_id          Int      @id @default(autoincrement())
  issue_title       String
  issue_email       String
  issue_content     String   @db.Text
  issue_img_length  Int      @default(0)
  issue_img_1       String
  issue_img_2       String
  issue_img_3       String
  issue_img_4       String
  issue_img_5       String
  issue_closed      Boolean  @default(false)
  issue_closed_type String
  issue_closed_at   DateTime @default(now())
  issue_created_at  DateTime @default(now())

  @@index([issue_id])
}